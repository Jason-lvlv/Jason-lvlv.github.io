{"version":3,"sources":["serviceWorker.js","store/todo/index.tsx","util/storage.js","store/index.tsx","components/listItem/index.tsx","views/todo/todo.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","storage","name","data","console","log","dataType","localStorage","setItem","JSON","stringify","indexOf","alert","getItem","parse","removeItem","todo","this","allList","observable","filter","item","isDone","computed","action","obj","push","setStorage","historyList","getStorage","Array","isArray","bool","id","idx","findIndex","splice","inject","observer","props","state","checked","setState","target","changeItemStatus","deleteItem","message","success","showCheckbox","label","className","join","onChange","changeChecked","bind","title","onConfirm","deletingItem","okText","cancelText","DeleteOutlined","React","defaultProps","TabPane","Tabs","ToDo","iptval","getHistoryList","AddUndone","Date","getTime","error","value","key","DoneList","UnDoneList","placeholder","allowClear","changeIptVal","style","width","marginRight","type","onClick","addNewItem","defaultActiveKey","changeTabs","tab","length","status","map","App","path","component","ReactDOM","render","rootState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iECfAC,EAAU,I,mGCADC,EAAMC,GACbC,QAAQC,IAAI,OAAQF,GACpB,IAAIG,SAAkBH,EACtBC,QAAQC,IAAI,WAAYC,GAER,WAAbA,EACCT,OAAOU,aAAaC,QAAQN,EAAMO,KAAKC,UAAUP,IAG7C,CAAC,SAAS,SAAS,WAAWQ,QAAQL,IAAa,EACvDT,OAAOU,aAAaC,QAAQN,EAAMC,GAIlCS,MAAM,wE,iCAIHV,GACP,IAAIC,EAAON,OAAOU,aAAaM,QAAQX,GACvC,OAAGC,EACQM,KAAKK,MAAMX,GAGX,K,oCAIDD,GACVL,OAAOU,aAAaQ,WAAWb,O,MC9BxB,GACXc,KF6Da,I,aA/Cb,aAAsB,wNAClBC,KAAKC,QAAUC,YAAW,I,qDAI1B,OAAOF,KAAKC,QAAQE,QAAO,SAAAC,GAAI,OAAEA,EAAKC,Y,iCAItC,OAAOL,KAAKC,QAAQE,QAAO,SAAAC,GAAI,OAAGA,EAAKC,c,0CAZ1CH,K,kGAOAI,K,2GAIAA,K,8GAIAC,K,oFACkB,SAACC,GAChB,EAAKP,QAAQQ,KAAKD,GAClBxB,EAAQ0B,WAAW,UAAU,EAAKT,a,4CAGrCM,K,oFACuB,WACpB,IAAII,EAAc3B,EAAQ4B,WAAW,WAClCC,MAAMC,QAAQH,KACb,EAAKV,QAAUC,YAAW,YAAIS,S,8CAIrCJ,K,oFACyB,SAACQ,EAAeC,GACtC,IAAIC,EAAa,EAAKhB,QAAQiB,WAAU,SAAAd,GAAI,OAAEA,EAAKY,KAAOA,MAC9C,IAATC,IACC,EAAKhB,QAAQgB,GAAKZ,OAASU,EAE3B/B,EAAQ0B,WAAW,UAAU,EAAKT,c,wCAIzCM,K,oFACmB,SAACS,GACjB,IAAIC,EAAa,EAAKhB,QAAQiB,WAAU,SAAAd,GAAI,OAAEA,EAAKY,KAAOA,MAC9C,IAATC,IACC,EAAKhB,QAAQkB,OAAOF,EAAM,GAC1BjC,EAAQ0B,WAAW,UAAU,EAAKT,c,+GGxC7CmB,YAAO,O,GACPC,a,sDAEO,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,SAAQ,GAHE,E,gEAUdxB,KAAKyB,SAAS,CAACD,QAAQxB,KAAKsB,MAAMjB,W,uCAEJ,IAAXmB,EAAU,EAAlBE,OAAQF,QACnBrC,QAAQC,IAAI,gBAAgBoC,GADC,MAEPxB,KAAKsB,MAAnBvB,EAFqB,EAErBA,KAAOiB,EAFc,EAEdA,GAEfjB,EAAK4B,iBAAiBH,EAAUR,GAChChB,KAAKyB,SAAS,CAACD,QAAQA,M,qCAEZ,IAAD,EACYxB,KAAKsB,MAAnBvB,EADE,EACFA,KAAOiB,EADL,EACKA,GACfjB,EAAK6B,WAAWZ,GAChBa,IAAQC,QAAQ,oB,+BAEX,IAAD,EAC2B9B,KAAKsB,MAA7BS,EADH,EACGA,aAAcC,EADjB,EACiBA,MACrB,OAAQ,uBAAKC,UAAW,CAAC,OAASjC,KAAKuB,MAAMC,QAAU,OAAQ,MAAOU,KAAK,MAC7DH,EAAe,gBAAC,IAAD,CAAUP,QAASxB,KAAKuB,MAAMC,QAAUW,SAAUnC,KAAKoC,cAAcC,KAAKrC,QAAY,KACrGgC,EAEF,gBAAC,IAAD,CACIM,MAAM,iCACNC,UAAWvC,KAAKwC,aAAaH,KAAKrC,MAClCyC,OAAO,MACPC,WAAW,MAEX,gBAACC,EAAA,EAAD,Y,GArCEC,a,EAOfC,aAAe,CAClBd,cAAa,G,cChBhBe,EAAYC,IAAZD,QAiFME,EA/Ed5B,YAAQ,O,GACRC,Y,oDAEG,WAAYC,GAAgB,IAAD,8BACvB,cAAMA,IACDC,MAAQ,CACT0B,OAAO,KAGXC,EAD2B,EAAK5B,MAAMvB,KAA9BmD,kBALe,E,sGAeP,IACRC,EAAcnD,KAAKsB,MAAMvB,KAAzBoD,UACAF,EAAWjD,KAAKuB,MAAhB0B,OACJA,EASJE,EALe,CACXnB,MAAMiB,EACN5C,QAAO,EACPW,IAAG,IAAIoC,MAAOC,YANdxB,IAAQyB,MAAM,8B,sCAagB,IAATC,EAAQ,EAAhB7B,OAAQ6B,MACzBvD,KAAKyB,SAAS,CAACwB,OAAOM,M,iCAGRC,M,+BAGF,IAAD,EACkCxD,KAAKsB,MAAMvB,KAAhDE,EADG,EACHA,QAAUwD,EADP,EACOA,SAAWC,EADlB,EACkBA,WAE7B,OAEQ,uBAAKzB,UAAU,aACX,gBAAC,IAAD,CAAMK,MAAM,SACR,gBAAC,IAAD,CAAOqB,YAAY,2BAAQC,YAAY,EAAMzB,SAAUnC,KAAK6D,aAAaxB,KAAKrC,MAAO8D,MAAO,CAACC,MAAM,QAAQC,YAAY,UACvH,gBAAC,IAAD,CAAQC,KAAK,UAAUC,QAASlE,KAAKmE,WAAW9B,KAAKrC,OAArD,mBAGA,gBAAC,IAAD,CAAOoE,iBAAiB,IAAIjC,SAAUnC,KAAKqE,YACvC,gBAACvB,EAAD,CAASwB,IAAI,qBAAMd,IAAI,KACK,IAAtBE,EAAWa,OAAe,gBAAC,IAAD,CAASC,OAAO,UAAWlC,MAAM,0BAAuBoB,EAAWe,KAAI,SAAArE,GAAI,OAAI,gBAAC,EAAD,eAAWoD,IAAKpD,EAAKY,IAAUZ,QAG9I,gBAAC0C,EAAD,CAASwB,IAAI,qBAAMd,IAAI,KAEK,IAApBC,EAASc,OAAe,gBAAC,IAAD,CAASC,OAAO,UAAWlC,MAAM,kBAA0BmB,EAASgB,KAAI,SAAArE,GAAI,OAAI,gBAAC,EAAD,eAAWoD,IAAKpD,EAAKY,IAAUZ,QAG/I,gBAAC0C,EAAD,CAASwB,IAAI,eAAKd,IAAI,KAEK,IAAnBvD,EAAQsE,OAAe,gBAAC,IAAD,CAASC,OAAO,QAAcvE,EAAQwE,KAAI,SAAArE,GAAI,OAAI,gBAAC,EAAD,eAAW2B,cAAc,EAAQyB,IAAKpD,EAAKY,IAAUZ,e,GA/D/IwC,e,MCJb8B,E,uKAEF,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAY7E,U,GALpB6C,aAYlBiC,IAASC,OACP,gBAAC,IAAaC,EACV,gBAAC,EAAD,OAEJC,SAASC,eAAe,SNuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLnE,QAAQmE,MAAMA,EAAMzB,c","file":"static/js/main.a0f53fb6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, computed} from 'mobx'\r\nimport Storage from '../../util/storage'\r\n\r\nconst storage = new Storage()\r\n\r\ninterface todoItem {\r\n    label:string,\r\n    isDone:boolean,\r\n    id:number\r\n}\r\n\r\n\r\nclass todoState {\r\n\r\n    @observable\r\n    public allList:todoItem[];\r\n   \r\n    public constructor (){\r\n        this.allList = observable([])\r\n    }\r\n    \r\n    @computed get DoneList(){\r\n        return this.allList.filter(item=>item.isDone)\r\n    }\r\n    \r\n    @computed get UnDoneList(){\r\n        return this.allList.filter(item=>!item.isDone)\r\n    }\r\n\r\n    @action \r\n    public AddUndone = (obj:todoItem)=>{\r\n        this.allList.push(obj)\r\n        storage.setStorage('allList',this.allList)\r\n    }\r\n\r\n    @action \r\n    public getHistoryList = ()=>{\r\n        let historyList = storage.getStorage('allList')\r\n        if(Array.isArray(historyList)){\r\n            this.allList = observable([...historyList])\r\n        }\r\n    }\r\n\r\n    @action \r\n    public changeItemStatus = (bool:boolean , id:number)=>{\r\n        let idx:number = this.allList.findIndex(item=>item.id === id)\r\n        if(idx !== -1){\r\n            this.allList[idx].isDone = bool\r\n\r\n            storage.setStorage('allList',this.allList)\r\n\r\n        }\r\n    }\r\n    @action \r\n    public deleteItem = (id:number)=>{\r\n        let idx:number = this.allList.findIndex(item=>item.id === id)\r\n        if(idx !== -1){\r\n            this.allList.splice(idx , 1)\r\n            storage.setStorage('allList',this.allList)\r\n\r\n        }\r\n    }\r\n}\r\n\r\nconst todolist = new todoState()\r\n\r\nexport default todolist","class Storage{\r\n    \r\n    // 本地存储\r\n    setStorage(name, data){\r\n        console.log('data', data)\r\n        let dataType = typeof data;\r\n        console.log('dataType', dataType)\r\n        // json对象\r\n        if(dataType === 'object'){\r\n            window.localStorage.setItem(name, JSON.stringify(data));\r\n        }\r\n        // 基础类型\r\n        else if(['number','string','boolean'].indexOf(dataType) >= 0){\r\n            window.localStorage.setItem(name, data);\r\n        }\r\n        // 其他不支持的类型\r\n        else{\r\n            alert('该类型不能用于本地存储');\r\n        }\r\n    }\r\n    // 取出本地存储内容\r\n    getStorage(name){\r\n        let data = window.localStorage.getItem(name);\r\n        if(data){\r\n            return JSON.parse(data);\r\n        }\r\n        else{\r\n            return '';\r\n        }\r\n    }\r\n    // 删除本地存储\r\n    removeStorage(name){\r\n        window.localStorage.removeItem(name);\r\n    }\r\n}\r\n\r\nexport default Storage;","import todo from './todo'\r\n\r\nexport default {\r\n    todo\r\n}","import * as React from 'react'\r\nimport {observer, inject} from 'mobx-react'\r\nimport { Checkbox ,Popconfirm , message} from 'antd';\r\nimport {DeleteOutlined} from '@ant-design/icons';\r\nimport './index.css'\r\n\r\ninterface todoItem{\r\n    label:string;\r\n    isDone:boolean;\r\n    id:number;\r\n    todo:any,\r\n    showCheckbox:boolean\r\n}\r\ninterface IState {\r\n    checked:boolean\r\n}\r\n\r\n\r\n@inject('todo')\r\n@observer\r\nexport default  class extends React.Component<todoItem ,IState> {\r\n        constructor(props){\r\n            super(props)\r\n            this.state = {\r\n                checked:false\r\n            }\r\n        }\r\n        static defaultProps = {\r\n            showCheckbox:true\r\n        }\r\n        componentDidMount(){\r\n            this.setState({checked:this.props.isDone})\r\n        }\r\n        changeChecked({target:{checked}}){\r\n            console.log('changeChecked',checked )\r\n            const { todo , id } = this.props\r\n\r\n            todo.changeItemStatus(checked , id)\r\n            this.setState({checked:checked})\r\n        }\r\n        deletingItem(){\r\n            const { todo , id } = this.props\r\n            todo.deleteItem(id)\r\n            message.success('Delete Success');\r\n        }\r\n        render(){\r\n            const {showCheckbox ,label } = this.props\r\n            return (<div className={[\"item\" , this.state.checked ? \"done\" :null ].join(' ')}>\r\n                        { showCheckbox ? <Checkbox checked={this.state.checked}  onChange={this.changeChecked.bind(this)} /> : null }\r\n                        { label }\r\n\r\n                        <Popconfirm\r\n                            title=\"Are you sure delete this task?\"\r\n                            onConfirm={this.deletingItem.bind(this)}\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                        >\r\n                            <DeleteOutlined  />\r\n                        </Popconfirm>\r\n                    </div>  )      \r\n        }\r\n}\r\n","import * as React from 'react';\r\nimport { Card , Input , Button , message , Tabs , Result} from 'antd';\r\nimport './todo.css'\r\nimport {observer, inject} from 'mobx-react'\r\nimport ListItem from '../../components/listItem'\r\n\r\n\r\n\r\ninterface AppProps {\r\n    todo:any\r\n}\r\n\r\nconst  { TabPane } = Tabs;\r\n\r\n@inject( 'todo' )\r\n@observer\r\nclass ToDo extends React.Component <AppProps,any>{\r\n    constructor(props:AppProps){\r\n        super(props)\r\n        this.state = {\r\n            iptval:''\r\n        }\r\n        const { getHistoryList } = this.props.todo\r\n        getHistoryList()\r\n    }\r\n    componentDidMount(){\r\n       \r\n        \r\n\r\n    }\r\n    \r\n\r\n    public addNewItem(){\r\n        const { AddUndone } = this.props.todo\r\n        const { iptval } = this.state\r\n        if(!iptval) { \r\n            message.error('This is an error message'); \r\n            return \r\n        }\r\n        let todoItem = {\r\n            label:iptval,\r\n            isDone:false,\r\n            id:new Date().getTime()\r\n        }\r\n        AddUndone(todoItem)\r\n    }\r\n\r\n\r\n\r\n    public changeIptVal({target:{value}}){\r\n        this.setState({iptval:value})\r\n    }\r\n\r\n    public changeTabs(key){\r\n    }\r\n\r\n    public render(){\r\n        const { allList , DoneList , UnDoneList  } = this.props.todo\r\n\r\n        return (\r\n            \r\n                <div className=\"todoouter\">\r\n                    <Card title=\"today\">\r\n                        <Input placeholder=\"输入内容\"  allowClear={true} onChange={this.changeIptVal.bind(this)} style={{width:'300px',marginRight:'20px'}}/>\r\n                        <Button type=\"primary\" onClick={this.addNewItem.bind(this)}>add new mission</Button>\r\n                            \r\n\r\n                        <Tabs  defaultActiveKey=\"1\" onChange={this.changeTabs} >\r\n                            <TabPane tab=\"未完成\" key=\"1\">\r\n                                { UnDoneList.length === 0 ? <Result  status=\"success\"  title=\"finish！happy :-)\"  />:UnDoneList.map(item => <ListItem  key={item.id}   {...item} />)}\r\n\r\n                            </TabPane>\r\n                            <TabPane tab=\"已完成\" key=\"2\">\r\n                                { \r\n                                    DoneList.length === 0 ? <Result  status=\"warning\"  title=\"just do it!!!\"  />   :   DoneList.map(item => <ListItem  key={item.id}   {...item} />) \r\n                                }\r\n                            </TabPane>\r\n                            <TabPane tab=\"全部\" key=\"3\">\r\n                                { \r\n                                    allList.length === 0 ? <Result  status=\"404\"/>   :   allList.map(item => <ListItem  showCheckbox={false}  key={item.id}   {...item} /> )\r\n                                }\r\n                            </TabPane>\r\n                        </Tabs>\r\n\r\n\r\n                    </Card>\r\n                </div>\r\n           \r\n        )\r\n    }    \r\n\r\n}\r\n\r\nexport default ToDo","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// import App from './App';\nimport { Provider } from 'mobx-react'\nimport * as serviceWorker from './serviceWorker';\nimport rootState from './store'\nimport 'antd/dist/antd.css';\n// todo\nimport todo from './views/todo/todo'\n\n\nclass App extends React.Component {\n  public render (){\n    return (\n      <BrowserRouter>\n        <Switch >\n          <Route path=\"/\" component={ todo }></Route>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n}\n\nReactDOM.render(\n  <Provider {...rootState}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}